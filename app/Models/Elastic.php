<?php namespace App\Models;

/**
 * Elastic.php
 * Created 26/07/2019
 * 
 * @author Owen Lancaster 
 * @author Gregory Warren
 * @author Mehdi Mehtarizadeh
 */

 use App\Models\Settings;
 
 use CodeIgniter\Model;
 use CodeIgniter\Database\ConnectionInterface;

class Elastic extends Model{

    protected $db;
    protected $builder;

    public function  __construct(ConnectionInterface &$db){
        $this->db =& $db;
        $this->setting =  Settings::getInstance($this->db);
    }

    /**
     * Delete Elastic Index - For a given source delete all its ElasticSearch Indices
     *
     * @param int $source_id - The Id of the Source
     * @return N/A
     */
    function deleteElasticIndex($source_id) {
        $params = [];
        $title = $this->setting->settingData['site_title'];
        $index_name = $title."_".$source_id."*";	    
        $uri = $this->setting->settingData['elastic_url']."/".$index_name;
        try {
            $this->buildCurlCommand($uri);
        }	  
        catch (exception $e) {
            error_log("No Indices exist for source: ". $source_id);
        }      	 
    }

    function buildCurlCommand($uri){
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, $uri);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);
    }

    /**
     * Get VCF Pending - Get a list of all pending VCF files to add to MySQL for a given source
     *
     * @param int $source_id - The id of the source
     * @return array $vcf    - Full details needed for all VCF Files
     */
    function getvcfPending($source_id) {

        $this->builder = $this->db->table('UploadDataStatus');

        $this->builder->select('FileName,tissue,patient');
        $this->builder->like('FileName', '.vcf', 'before'); 
        $this->builder->where('Status', 'Pending');
        $this->builder->where('source_id', $source_id);
        $vcf = $this->builder->get()->getResultArray();
        return $vcf;
    }

    
    /**
     * VCF Wrap - We have finished inserting data for a VCF file and it is time to update the status table. 
     *
     * @param string $file   - The name of the file
     * @param int $source_id - The id of the source
     * @return N/A 
     */
    function vcfWrap($file, $source_id) {
        $this->builder = $this->db->table('UploadDataStatus');

        $now = date('Y-m-d H:i:s');
        $Status = "Success";
        $data = array(
            'uploadEnd' => $now,
            'Status' => $Status);
        $this->builder->where('FileName', $file);
        $this->builder->where('source_id', $source_id);
        $this->builder->update($data);
    }
}