<?php namespace App\Models;

/**
 * Elastic.php
 * Created 26/07/2019
 * @deprecated
 * @author Owen Lancaster
 * @author Gregory Warren
 * @author Mehdi Mehtarizadeh
 */

 use App\Models\Settings;
 use App\Libraries\ElasticSearch;
 use CodeIgniter\Model;
 use CodeIgniter\Database\ConnectionInterface;
 use GraphAware\Neo4j\Client\ClientBuilder;

class Elastic extends Model{

    protected $db;
    protected $builder;

    private $elasticInstance;

    public function  __construct(ConnectionInterface &$db = Null){
        if ($db != null) {
            $this->db =& $db;
        }
        else {
            $this->db = \Config\Database::connect();
        }
        $this->setting =  Settings::getInstance($this->db);

        $this->elasticInstance = new ElasticSearch([$this->setting->getElasticSearchUri()]);

        helper('filesystem');
    }

    /**
     * Delete Elastic Index - For a given source delete all its ElasticSearch Indices
     *
     * @param int $source_id - The Id of the Source
     * @return N/A
     */
    function deleteIndex(int $source_id) {

        $params = [];

        $prefix = $this->getTitlePrefix();
        $index_name = $prefix."_".$source_id."*";

        if($this->elasticInstance->indexExists($index_name)){
            $this->elasticInstance->deleteIndex($index_name);
        }
    }

    /**
     * @deprecated
     */
    function buildCurlCommand($uri){
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, $uri);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);
    }

    /**
     * Get VCF Pending - Get a list of all pending VCF files to add to MySQL for a given source
     * @deprecated
     * @param int $source_id - The id of the source
     * @return array $vcf    - Full details needed for all VCF Files
     */
    function getvcfPending($source_id) {

        $this->builder = $this->db->table('uploaddatastatus');

        $this->builder->select('FileName,tissue,patient');
        $this->builder->like('FileName', '.vcf', 'before');
        $this->builder->where('Status', 'Pending');
        $this->builder->where('source_id', $source_id);
        $vcf = $this->builder->get()->getResultArray();
        return $vcf;
    }

    /**
     * VCF Wrap - We have finished inserting data for a VCF file and it is time to update the status table.
     * @deprecated
     * @param string $file   - The name of the file
     * @param int $source_id - The id of the source
     * @return N/A
     */
    function vcfWrap($file, $source_id) {
        $this->builder = $this->db->table('uploaddatastatus');

        $now = date('Y-m-d H:i:s');
        $Status = "Success";
        $data = array(
            'uploadEnd' => $now,
            'Status' => $Status);
        $this->builder->where('FileName', $file);
        $this->builder->where('source_id', $source_id);
        $this->builder->update($data);
    }

    /**
     * getTitlePrefix()
     * This funcion returns the first part of site_title variable in settings table in the database.
     *
     * @author Mehdi Mehtarizadeh
     * @deprecated
     * @param void
     * @return string
     */
    public function getTitlePrefix(): string
    {
        $title = $this->setting->settingData['site_title'];
        $title = preg_replace("/\s.+/", '', $title);

        $baseUrl = base_url();
        if(strpos($baseUrl, "http://") !== false){
            $baseUrl = str_replace('http://', '', $baseUrl);
        }
        elseif (strpos($baseUrl, 'https://') !== false) {
            $baseUrl = str_replace('https://', '', $baseUrl);
        }

        $segments = explode('/', $baseUrl);

        $prefix = count($segments) > 1 ? $segments[1] : $title;

        return strtolower($prefix);
    }
}
